#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16f) uniform image2D out_frame;

layout (set = 0, binding = 1, rgba16f) uniform readonly image3D cloudtex;

layout (set = 0, binding = 2, r16f) uniform readonly image2D weather;

layout (set = 0, binding = 3) uniform readonly CAMERA
{
    vec3 pos;
    float fov;
    vec3 dir;
    float width;
    vec3 up;
    float height;
} camera;

layout (set = 0, binding = 4) uniform readonly CLOUD
{
    float type;
    float freq;
    float ambient;
    float sigma_a;
    float sigma_s;
    float step;
    int max_steps;
    float cutoff;
    vec3 sun_color;
    float density;
    vec3 sky_color;
} cloud;

float rand(float x)
{
    /* better performance worse result */
    // return sqrt(fract(sin(x) * 100000.f));
    // return sqrt(fract(sin(x) * 100000.f)) - .5f;
    return fract(sin(x) * 100000.f) - .5f;
}

float fade(float t)
{
	return t * t * t * (t * (t * 6.f - 15.f) + 10.f);
}

float remap(float value, float old_min, float old_max, float new_min, float new_max)
{
    return clamp(new_min + ((value - old_min) / (old_max - old_min)) * (new_max - new_min), new_min, new_max);
}

/* reference: https://www.shadertoy.com/view/lslGzl */
vec3 linearToneMapping(vec3 color)
{
    float exposure = .6f;
    float gamma = 3.f;
    color = clamp(exposure * color, 0.f, 1.f);
    color = pow(color, vec3(1.f / gamma));
    return color;
}

struct sphere {
    vec3 centre;
    float radius;
};

vec2 hit_sphere(sphere s, vec3 o, vec3 r)
{
    float a = dot(r, r);
    float b = -2.f * dot(r, s.centre - o);
    float c = dot(s.centre - o, s.centre - o) - s.radius * s.radius;
    float discriminant = b * b - 4.f * a * c;

    if (discriminant >= 0.f)
            return vec2((-b - sqrt(discriminant)) / 2.f * a, (-b + sqrt(discriminant)) / 2.f * a);

    return vec2(-1.f);
}

float phase(float g, vec3 a, vec3 b)
{
    float cos_theta = dot(a, b);
    float denom = 1.f + g * g - 2.f * g * cos_theta;
    return 1.f / (4.f * 3.14f) * (1.f - g * g) / (denom * sqrt(denom));
}

float eval_density(vec3 p, float height)
{
    float coverage = imageLoad(weather, ivec2(p.xz * .19f - vec2(-256.f))).x;
    if (coverage < .02f) return 0.f;

    vec4 d = imageLoad(cloudtex, ivec3(p * cloud.freq) & 127);
    float low_freq_worley = d.y + d.z + d.w;
    d.x = remap(d.x, 1.f - cloud.density, 1.f, 0.f, 1.f);
    d.x = remap(d.x, 1.f - coverage, 1.f, 0.f, 1.f);
    d.x = remap(d.x, low_freq_worley - 1.3f, 1.f, 0.f, 1.f);

    float lowerupperlimit = remap(cloud.type, 0.f, 1.f, .11f, .25f);
    float upperlowerlimit = remap(cloud.type, 0.f, 1.f, .13f, .75f);
    float upperupperlimit = remap(cloud.type, 0.f, 1.f, .14f, .89f);

    float type = 1.f;
    if (height < lowerupperlimit)
        type = smoothstep(.1f, lowerupperlimit, height);
    if (height > upperlowerlimit)
        type = smoothstep(upperupperlimit, upperlowerlimit, height);
    d.x = remap(d.x, 1.f - type, 1.f, 0.f, 1.f);

    d.x = remap(d.x, cloud.cutoff, 1.f, 0.f, 1.f);
    return d.x * cloud.density * coverage * type * height;
}

void main()
{
    int x = int(8 * gl_WorkGroupID.x + gl_LocalInvocationID.x);
    int y = int(8 * gl_WorkGroupID.y + gl_LocalInvocationID.y);

    vec2 res = vec2(8 * gl_NumWorkGroups.x, 8 * gl_NumWorkGroups.y);

    vec3 o = camera.pos;
    vec3 d = camera.dir;

    vec3 left = normalize(cross(camera.up, d));
    vec3 up = normalize(cross(d, left));

    float ux = float(x) / res.x * camera.width;
    float uy = float(y) / res.y * camera.height;

    float h = tan(radians(camera.fov) / 2.f);
    vec3 upperleft = (o + res.y / 2.f / h * d) + left * camera.width / 2.f + up * camera.height / 2.f;
    vec3 r = normalize(upperleft - left * ux - up * uy - o);

    vec3 background = /* vec3(0.f) */ mix(cloud.sky_color, vec3(1.f), y / camera.height);

    // intersect
    sphere inner;
    inner.centre = vec3(0.f);
    inner.radius = 0.f + 150.f;

    sphere outer;
    outer.centre = vec3(0.f);
    outer.radius = inner.radius + 800.f;

    vec2 innert = hit_sphere(inner, o, r);
    if ((innert.x < 0.f) && (innert.y >= 0.f)) { innert.x = 0.f; }

    vec2 outert = hit_sphere(outer, o, r);
    if ((outert.x < 0.f) && (outert.y >= 0.f)) { outert.x = 0.f; }

    float camera_radius = length(o);
    vec2 t = vec2(-1.f);

    if (camera_radius < inner.radius) t = vec2(innert.y, outert.y);
    if ((camera_radius > inner.radius) && (camera_radius < outer.radius)) t = vec2(0.f, outert.y);
    if (camera_radius > outer.radius) t = outert;

    float transmittance = 1.f;
    vec3 color = vec3(0.f);

    // in volume marching
    if (t.x >= 0.f)
    {
        vec3 np = (o + t.y * r);
        float sigma_s = cloud.sigma_s;
        float sigma_t = cloud.sigma_a + cloud.sigma_s;
        float step = cloud.step;
        int step_count = 0;
        t += step + step * rand(t.y);

        while (t.x < t.y)
        {
            vec3 p = o + t.x * r;

            // dome check
            if (p.y < 0.f) {
                if (np.y < 0.f) break;
                t.x += 10.f * (step + step * rand(t.x)); continue;
            }

            float height = (length(p) - inner.radius) / 800.f;
            float density = eval_density(p, height);
            if (density < .02f) { t.x += 20.f * (step + step * rand(t.x)); continue; }

            transmittance *= exp(-step * sigma_t * density);

            // estimate in-scattering to p in volume
            vec3 ld = normalize(vec3(0.f, .6f, 1.f));
            float nstep = 6.f * step;
            int nsteps = 6;
            float tau = 0.f;

            for (int j = 0; j < nsteps; ++j)
            {
                p += (nstep + nstep * rand(p.x + p.y + p.z)) * ld;
                float nheight = (length(p) - inner.radius) / 800.f;
                tau += eval_density(p, nheight);
            }

            float fr = 3.f * phase(.3f, ld, r) + 1.5f * phase(.6f, ld, r)
                    + .3f * phase(.9f, ld, r) + .3f * phase(-.3f, ld, r);
            vec3 ambient = vec3(.6f, .9f, 1.f) * cloud.ambient * remap(height, 0.f, 1.f, .6f, 1.f) * exp(-nstep * sigma_t * tau);
            vec3 li = cloud.sun_color * fr * exp(-nstep * sigma_t * tau) + ambient;
            color += transmittance * sigma_s * density * li * step;

            t.x += step + step * rand(t.x);
            if (++step_count > cloud.max_steps) break;
            if (transmittance < (step + step * rand(t.x))) break;
        }
    }

    color += background * transmittance;
    imageStore(out_frame, ivec2(x, y), vec4(color, 1.f));
    // imageStore(out_frame, ivec2(x, y), vec4(linearToneMapping(color), 1.f));
}
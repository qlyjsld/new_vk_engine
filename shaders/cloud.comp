#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16f) uniform image2D out_frame;

layout (set = 0, binding = 1, rgba16f) uniform readonly image3D cloudtex;

layout (set = 0, binding = 2, r16f) uniform readonly image2D weather;

layout (set = 0, binding = 3) uniform readonly CAMERA {
    vec3 pos;
    float fov;
    vec3 dir;
    float width;
    vec3 left;
    float height;
} camera;

layout (set = 0, binding = 4) uniform readonly CLOUD {
    float type;
    float freq;
    float ambient;
    float sigma_a;
    float sigma_s;
    float step;
    int max_steps;
    float cutoff;
    vec3 sun_color;
    float density;
    vec3 sky_color;
} cloud;

struct sphere {
    vec3 centre;
    float radius;
};

float rand(float x)
{
    return fract(sin(x) * 100000.f);
}

float remap(float value, float old_min, float old_max, float new_min, float new_max)
{
    return clamp(new_min + ((value - old_min) / (old_max - old_min))
            * (new_max - new_min), new_min, new_max);
}

vec2 hit_sphere(sphere s, vec3 o, vec3 r)
{
    float a = dot(r, r);
    float b = -2.f * dot(r, s.centre - o);
    float c = dot(s.centre - o, s.centre - o) - s.radius * s.radius;
    float discriminant = b * b - 4.f * a * c;

    if (discriminant >= 0.f)
        return vec2((-b - sqrt(discriminant)) * .5f * a,
                    (-b + sqrt(discriminant)) * .5f * a);

    return vec2(-1.f);
}

float phase(float g, vec3 a, vec3 b)
{
    float cos_theta = dot(a, b);
    float denom = 1.f + g * g - 2.f * g * cos_theta;
    return 1.f / (4.f * 3.14f) * (1.f - g * g) / (denom * sqrt(denom));
}

// vec3 fade(vec3 t)
// {
// 	return t * t * t * (t * (t * 6.f - 15.f) + 10.f);
// }

float eval_density(vec3 p, float h, float c)
{
    // p *= cloud.freq;

    // vec4 d0 = imageLoad(cloudtex, (ivec3(p) + ivec3(0, 0, 0)) & 127);
    // vec4 d1 = imageLoad(cloudtex, (ivec3(p) + ivec3(0, 0, 1)) & 127);
    // vec4 d2 = imageLoad(cloudtex, (ivec3(p) + ivec3(0, 1, 0)) & 127);
    // vec4 d3 = imageLoad(cloudtex, (ivec3(p) + ivec3(0, 1, 1)) & 127);
    // vec4 d4 = imageLoad(cloudtex, (ivec3(p) + ivec3(1, 0, 0)) & 127);
    // vec4 d5 = imageLoad(cloudtex, (ivec3(p) + ivec3(1, 0, 1)) & 127);
    // vec4 d6 = imageLoad(cloudtex, (ivec3(p) + ivec3(1, 1, 0)) & 127);
    // vec4 d7 = imageLoad(cloudtex, (ivec3(p) + ivec3(1, 1, 1)) & 127);

    // vec3 lerp = fade(fract(p));

    // vec4 d = mix(mix(mix(d0, d1, lerp.x), mix(d2, d3, lerp.x), lerp.y),
    //         mix(mix(d4, d5, lerp.x), mix(d6, d7, lerp.x), lerp.y), lerp.z);

    vec4 d = imageLoad(cloudtex, ivec3(p * cloud.freq) & 127);

    float low_freq_worley = d.y + d.z + d.w;
    d.x = remap(d.x, 1.f - cloud.density, 1.f, 0.f, 1.f);
    d.x = remap(d.x, 1.f - c, 1.f, 0.f, 1.f);
    d.x = remap(d.x, low_freq_worley - 1.3f, 1.f, 0.f, 1.f);

    float lowerupperlimit = remap(cloud.type, 0.f, 1.f, .11f, .25f);
    float upperlowerlimit = remap(cloud.type, 0.f, 1.f, .13f, .75f);
    float upperupperlimit = remap(cloud.type, 0.f, 1.f, .14f, .89f);

    float type = 1.f;
    type = h < lowerupperlimit ? smoothstep(.1f, lowerupperlimit, h) : type;
    type = h > upperlowerlimit ?
        smoothstep(upperupperlimit, upperlowerlimit, h) : type;

    d.x = remap(d.x, 1.f - type, 1.f, 0.f, 1.f);
    d.x = remap(d.x, cloud.cutoff, 1.f, 0.f, 1.f);
    return d.x * cloud.density * c * type * h;
}

void main()
{
    uint x = 8 * gl_WorkGroupID.x + gl_LocalInvocationID.x;
    uint y = 8 * gl_WorkGroupID.y + gl_LocalInvocationID.y;

    vec3 o = camera.pos;
    vec3 up = normalize(cross(camera.dir, camera.left));
    vec3 r = normalize(camera.height * .74128048534f * camera.dir
                    + camera.left * (camera.width * .5f - x)
                    + up * (camera.height * .5f - y));

    vec3 background = mix(cloud.sky_color, vec3(1.f), y / camera.height);

    // intersect
    sphere inner;
    inner.centre = vec3(0.f);
    inner.radius = 0.f + 150.f;

    sphere outer;
    outer.centre = vec3(0.f);
    outer.radius = inner.radius + 800.f;

    vec2 innert = hit_sphere(inner, o, r);
    innert.x = innert.x < 0.f && innert.y >= 0.f ? 0.f : innert.x;

    vec2 outert = hit_sphere(outer, o, r);
    outert.x = outert.x < 0.f && outert.y >= 0.f ? 0.f : outert.x;

    float camera_radius = length(o);
    vec2 t = vec2(-1.f);

    t = camera_radius < inner.radius ? vec2(innert.y, outert.y) : t;
    t = camera_radius > inner.radius && camera_radius < outer.radius ? vec2(0.f, outert.y) : t;
    t = camera_radius > outer.radius ? outert : t;

    float transmittance = 1.f;
    vec3 color = vec3(0.f);

    // in volume marching
    if (t.x >= 0.f) {
        float sigma_t = cloud.sigma_a + cloud.sigma_s;
        int step_count = 0;
        t += cloud.step + cloud.step * rand(t.y);

        while (t.x < t.y && step_count < cloud.max_steps && transmittance > .6f) {
            vec3 p = o + t.x * r;
            float tstep = cloud.step + cloud.step * rand(t.x);

            t.x += tstep;
            step_count++;

            // dome check
            if (p.y < 0.f) { t.x += 16.f * tstep; continue; }
            float c = imageLoad(weather, ivec2(p.xz * .3f + vec2(256.f))).x;
            if (c < .01f) { t.x += 16.f * tstep; continue; }
            float h = (length(p) - inner.radius) / 800.f;
            float d = eval_density(p, h, c);
            if (d < .01f) { t.x += 16.f * tstep; continue; }

            transmittance *= exp(-tstep * sigma_t * d);

            // estimate in-scattering to p in volume
            vec3 ld = normalize(vec3(0.f, .6f, 1.f));
            float tau = 0.f;

            for (int j = 0; j < 6; ++j) {
                p += 6.f * tstep * ld;
                c = imageLoad(weather, ivec2(p.xz * .3f + vec2(256.f))).x;
                h = (length(p) - inner.radius) / 800.f;
                tau += eval_density(p, h, c);
            }

            float fr = 3.f * phase(.3f, ld, r) + 1.f * phase(.6f, ld, r)
                    + .3f * phase(.9f, ld, r) + .3f * phase(-.3f, ld, r);

            vec3 ambient = vec3(1.f) * cloud.ambient * exp(-6.f * tstep * sigma_t * tau);

            vec3 li = cloud.sun_color * fr * exp(-6.f * tstep * sigma_t * tau) + ambient;
            color += transmittance * cloud.sigma_s * d * li * tstep;
        }
    }

    color += transmittance * background;
    imageStore(out_frame, ivec2(x, y), vec4(color, 1.f));
}

/* p stands for pre */

#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (set = 0, binding = 0, rgba16f) uniform writeonly image3D out_frame;

layout (push_constant) uniform readonly U_TIME
{
    float value;
} u_time;

uint p[] = { 151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
            140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
            247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
            57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
            74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
            60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
            65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
            200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
            52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
            207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
            119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
            129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
            218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
            81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
            184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
            222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180,
            151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
            140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
            247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
            57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
            74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
            60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
            65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
            200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
            52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
            207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
            119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
            129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
            218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
            81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
            184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
            222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180 };

vec3 fade(vec3 t)
{
	return t * t * t * (t * (t * 6.f - 15.f) + 10.f);
}

float grad(uint h, vec3 v)
{
    switch(h & 15) {
    case 0:
        return v.x + v.y;
    case 1:
        return v.x - v.y;
    case 2:
        return -v.x + v.y;
    case 3:
        return -v.x - v.y;
    case 4:
        return v.x + v.z;
    case 5:
        return v.x - v.z;
    case 6:
        return -v.x + v.z;
    case 7:
        return -v.x - v.z;
    case 8:
        return v.y + v.z;
    case 9:
        return v.y - v.z;
    case 10:
        return -v.y + v.z;
    case 11:
        return -v.y - v.z;
    case 12:
        return v.z + v.x;
    case 13:
        return v.z - v.x;
    case 14:
        return -v.z + v.y;
    case 15:
        return -v.z - v.y;
    }
}

float perlin_noise(vec3 uv, float f)
{
    uint iu = uint(uv.x) & 255;
    uint iv = uint(uv.y) & 255;
    uint iw = uint(uv.z) & 255;

    uv = fract(uv);
    vec3 fuv = fade(uv);

    uint iu1 = iu + 1;
    uint iv1 = iv + 1;
    uint iw1 = iw + 1;

    if (iu1 == f) iu1 = 0;
    if (iv1 == f) iv1 = 0;
    if (iw1 == f) iw1 = 0;

    uint a = p[p[p[iu] + iv] + iw];
    uint aa = p[p[p[iu1] + iv] + iw];
    uint ab = p[p[p[iu] + iv1] + iw];
    uint ac = p[p[p[iu1] + iv1] + iw];
    uint b = p[p[p[iu] + iv] + iw1];
    uint ba = p[p[p[iu1] + iv] + iw1];
    uint bb = p[p[p[iu] + iv1] + iw1];
    uint bc = p[p[p[iu1] + iv1] + iw1];

    vec3 da = uv;
    vec3 daa = uv + vec3(-1.f, 0.f, 0.f);
    vec3 dab = uv + vec3(0.f, -1.f, 0.f);
    vec3 dac = uv + vec3(-1.f, -1.f, 0.f);
    vec3 db = uv + vec3(0.f, 0.f, -1.f);
    vec3 dba = uv + vec3(-1.f, 0.f, -1.f);
    vec3 dbb = uv + vec3(0.f, -1.f, -1.f);
    vec3 dbc = uv + vec3(-1.f, -1.f, -1.f);

    float alerp = mix(mix(grad(a, da), grad(aa, daa), fuv.x),
                mix(grad(ab, dab), grad(ac, dac), fuv.x), fuv.y);

    float blerp = mix(mix(grad(b, db), grad(ba, dba), fuv.x),
                mix(grad(bb, dbb), grad(bc, dbc), fuv.x), fuv.y);

    return mix(alerp, blerp, fuv.z);
}

float fbm_perlin(vec3 uv, uint octaves, float f)
{
    float t = 0.f;
    float a = 1.f;
    for (uint o = 0; o < octaves; ++o) {
        a *= .5f;
        t += a * perlin_noise(f * uv, f);
        f *= 2.f;
    }

    return t;
}

vec3 random3f(vec3 st)
{
    st = vec3(dot(st, vec3(127.1f, 311.7f, 256.1f)),
            dot(st, vec3(269.5f, 183.3f, 241.3f)),
            dot(st, vec3(246.2f, 225.6f, 296.7f)));
    return fract(sin(st) * 43758.5453123f);
}

float worley_noise(vec3 uv, float f)
{
    vec3 iuv = floor(uv) - 1.f;
    float t = 1.f;
    uv -= iuv;

    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            for (int k = 0; k < 3; ++k) {
                vec3 niuv = iuv + vec3(i, j, k);

                if (niuv.x == f) niuv.x = 0.f;
                if (niuv.y == f) niuv.y = 0.f;
                if (niuv.z == f) niuv.z = 0.f;

                if (niuv.x < 0) niuv.x = f - 1.f;
                if (niuv.y < 0) niuv.y = f - 1.f;
                if (niuv.z < 0) niuv.z = f - 1.f;

                vec3 r = random3f(niuv) + vec3(i, j, k);
                t = min(t, length(uv - r));
            }

    return 1.f - t;
}

float fbm_worley(vec3 uv, uint octaves, float f)
{
    float t = 0.f;
    float a = 1.f;
    for (uint o = 0; o < octaves; ++o) {
        a *= .5f;
        t += a * worley_noise(f * uv, f);
        f *= 2.f;
    }

    return t;
}

float remap(float value, float old_min, float old_max, float new_min, float new_max)
{
    return clamp(new_min + ((value - old_min) / (old_max - old_min))
            * (new_max - new_min), new_min, new_max);
}

void main()
{
    uint o = 6;
    float f = .0078125f;
    uint x = 8 * gl_WorkGroupID.x + gl_LocalInvocationID.x;
    uint y = 8 * gl_WorkGroupID.y + gl_LocalInvocationID.y;
    uint z = 8 * gl_WorkGroupID.z + gl_LocalInvocationID.z;

    float p1 = fbm_perlin(vec3(x, y, z) * f, o, 3.f) * .5f + .5f;
    float w1 = fbm_worley(vec3(x, y, z) * f, o, 3.f);
    float w2 = fbm_worley(vec3(x, y, z) * f, o, 6.f);
    float w3 = fbm_worley(vec3(x, y, z) * f, o, 9.f);

    float t = p1;
    t = remap(t, -w1 * .6f, 1.f, 0.f, 1.f);
    t = remap(t, -w2 * .3f, 1.f, 0.f, 1.f);
    t = remap(t, -w3 * .1f, 1.f, 0.f, 1.f);

    vec4 col = vec4(t, w1, w2, w3);

    imageStore(out_frame, ivec3(x, y, z), col);
}

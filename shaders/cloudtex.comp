/* p stands for pre */

#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (set = 0, binding = 0, rgba16f) uniform writeonly image3D out_frame;

layout (push_constant) uniform readonly U_TIME
{
    float value;
} u_time;

uint p[] = { 151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
            140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
            247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
            57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
            74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
            60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
            65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
            200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
            52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
            207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
            119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
            129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
            218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
            81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
            184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
            222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180 };

float fade(float t)
{
	return t * t * t * (t * (t * 6.f - 15.f) + 10.f);
}

float lerp(float a, float b, float t)
{
	return a + t * (b - a);
}

float grad(uint h, vec3 v)
{
    switch(h & 15) {
    case 0:
        return v.x + v.y;
    case 1:
        return v.x - v.y;
    case 2:
        return -v.x + v.y;
    case 3:
        return -v.x - v.y;
    case 4:
        return v.x + v.z;
    case 5:
        return v.x - v.z;
    case 6:
        return -v.x + v.z;
    case 7:
        return -v.x - v.z;
    case 8:
        return v.y + v.z;
    case 9:
        return v.y - v.z;
    case 10:
        return -v.y + v.z;
    case 11:
        return -v.y - v.z;
    case 12:
        return v.z + v.x;
    case 13:
        return v.z - v.x;
    case 14:
        return -v.z + v.y;
    case 15:
        return -v.z - v.y;
    }
}

float perlin_noise(float x, float y, float z, float f)
{
    uint ix = uint(floor(x)) & 127;
    uint iy = uint(floor(y)) & 127;
    uint iz = uint(floor(z)) & 127;

    x -= floor(x);
    y -= floor(y);
    z -= floor(z);

    float u = fade(x);
    float v = fade(y);
    float w = fade(z);

    uint ix1 = ix + 1;
    uint iy1 = iy + 1;
    uint iz1 = iz + 1;

    if (ix1 == f) ix1 = 0;
    if (iy1 == f) iy1 = 0;
    if (iz1 == f) iz1 = 0;

    uint a = p[p[p[ix] + iy] + iz];
    uint aa = p[p[p[ix1] + iy] + iz];
    uint ab = p[p[p[ix] + iy1] + iz];
    uint ac = p[p[p[ix1] + iy1] + iz];
    uint b = p[p[p[ix] + iy] + iz1];
    uint ba = p[p[p[ix1] + iy] + iz1];
    uint bb = p[p[p[ix] + iy1] + iz1];
    uint bc = p[p[p[ix1] + iy1] + iz1];

    vec3 da = vec3(x, y, z);
    vec3 daa = vec3(x - 1.f, y, z);
    vec3 dab = vec3(x, y - 1.f, z);
    vec3 dac = vec3(x - 1.f, y - 1.f, z);
    vec3 db = vec3(x, y, z - 1.f);
    vec3 dba = vec3(x - 1.f, y, z - 1.f);
    vec3 dbb = vec3(x, y - 1.f, z - 1.f);
    vec3 dbc = vec3(x - 1.f, y - 1.f, z - 1.f);

    float alerp = lerp(lerp(grad(a, da), grad(aa, daa), u),
                lerp(grad(ab, dab), grad(ac, dac), u), v);

    float blerp = lerp(lerp(grad(b, db), grad(ba, dba), u),
                lerp(grad(bb, dbb), grad(bc, dbc), u), v);

    return lerp(alerp, blerp, w);
}

float remap(float value, float old_min, float old_max, float new_min, float new_max)
{
    return clamp(new_min + ((value - old_min) / (old_max - old_min))
            * (new_max - new_min), new_min, new_max);
}

float dist(vec3 a, vec3 b)
{
    return sqrt((b.z - a.z) * (b.z - a.z) + (b.y - a.y) *
                (b.y - a.y) + (b.x - a.x) * (b.x - a.x));
}

vec3 random3f(vec3 st)
{
    st = vec3(dot(st, vec3(127.1f, 311.7f, 256.1f)),
            dot(st, vec3(269.5f, 183.3f, 241.3f)),
            dot(st, vec3(246.2f, 225.6f, 296.7f)));
    return fract(sin(st) * 43758.5453123f);
}

float worley_noise(float x, float y, float z, float f)
{
    int ix = int(floor(x)) - 1;
    int iy = int(floor(y)) - 1;
    int iz = int(floor(z)) - 1;

    float t = 1.f;

    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            for (int k = 0; k < 3; ++k) {
                int ixi = ix + i;
                int iyj = iy + j;
                int izk = iz + k;

                if (ixi == f) ixi = 0;
                if (iyj == f) iyj = 0;
                if (izk == f) izk = 0;

                if (ixi < 0) ixi = int(floor(f)) - 1;
                if (iyj < 0) iyj = int(floor(f)) - 1;
                if (izk < 0) izk = int(floor(f)) - 1;

                vec3 r = random3f(vec3(ixi, iyj, izk)) + vec3(i, j, k);
                t = min(t, dist(vec3(x - ix, y - iy, z - iz), r));
            }
    
    return 1.f - t;
}

float fbm_perlin(float x, float y, float z, uint octaves, float f)
{
    float t = 0.f;
    float a = 1.f;
    x *= f;
    y *= f;
    z *= f;
    for (uint o = 0; o < octaves; ++o) {
        a *= .5f;
        t += a * perlin_noise(x, y, z, f);
        x *= 2.f;
        y *= 2.f;
        z *= 2.f;
        f *= 2.f;
    }

    return (t + 1.f) / 2.f;
}

float fbm_worley(float x, float y, float z, uint octaves, float f)
{
    float t = 0.f;
    float a = 1.f;
    x *= f;
    y *= f;
    z *= f;
    for (uint o = 0; o < octaves; ++o) {
        a *= .5f;
        t += a * worley_noise(x, y, z, f);
        x *= 2.f;
        y *= 2.f;
        z *= 2.f;
        f *= 2.f;
    }

    return t;
}

void main()
{
    uint x = 8 * gl_WorkGroupID.x + gl_LocalInvocationID.x;
    uint y = 8 * gl_WorkGroupID.y + gl_LocalInvocationID.y;
    uint z = 8 * gl_WorkGroupID.z + gl_LocalInvocationID.z;
    float ux = x * .0078125f;
    float uy = y * .0078125f;
    float uz = z * .0078125f;
    float color1 = fbm_perlin(ux, uy, uz, 3, 3);
    float color2 = fbm_worley(ux, uy, uz, 3, 3);
    float color3 = fbm_worley(ux, uy, uz, 3, 6);
    float color4 = fbm_worley(ux, uy, uz, 3, 9);
    imageStore(out_frame, ivec3(x, y, z), vec4(color1, color2, color3, color4));
}

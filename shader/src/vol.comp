#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16f) uniform image2D out_frame;

layout (set = 0, binding = 1, r16f) uniform readonly image3D cloudtex;

layout (set = 0, binding = 2) uniform readonly EXTENT
{
    vec2 value;
} extent;

layout (set = 0, binding = 3) uniform readonly CAMERA
{
    vec3 pos;
    vec3 dir;
    vec3 up;
    float fov;
} camera;

layout (set = 0, binding = 4) uniform readonly CLOUD
{
    vec3 extent;
    vec3 centre;
    vec3 size;
    float sigma_a;
    float sigma_s;
    float step;
    int max_steps;
    float cutoff;
    float density;
    float lambda;
    float temperature;
    vec3 color;
} cloud;

float rand(float x)
{
    return fract(sin(x) * 100000.f) - .5f;
}

float sdfsphere(vec3 p, float r)
{
    return length(p) - r;
}

float sdfbox(vec3 p, vec3 d)
{
    return length(p - min(max(vec3(0), p), d));
}

float map(vec3 p)
{
    vec3 sphere = vec3(0.f, 0.f, 3.f);
    float s = sdfsphere(p - sphere, 1.f);

    vec3 box = vec3(-4.f, -1.f, -1.f);
    s = min(sdfbox(p - box, vec3(2.f)), s);

    return s;
}

struct sphere {
    vec3 centre;
    float radius;
};

vec2 hit_sphere(sphere s, vec3 o, vec3 r)
{
    float a = dot(r, r);
    float b = -2 * dot(r, s.centre - o);
    float c = dot(s.centre - o, s.centre - o) - s.radius * s.radius;
    float discriminant = b * b - 4 * a * c;

    if (discriminant >= 0)
            return vec2((-b - sqrt(discriminant)) / 2 * a, (-b + sqrt(discriminant)) / 2 * a);

    return vec2(-1.f);
}

vec2 hit_box(vec3 c, vec3 e, vec3 o, vec3 r)
{
    vec3 bmin = c - e * .5f;
    vec3 bmax = c + e * .5f;

    float tmin = (bmin.x - o.x) / r.x;
    float tmax = (bmax.x - o.x) / r.x;

    if (tmin > tmax) { float dummy = tmin; tmin = tmax; tmax = dummy; }

    float tymin = (bmin.y - o.y) / r.y;
    float tymax = (bmax.y - o.y) / r.y;

    if (tymin > tymax) { float dummy = tymin; tymin = tymax; tymax = dummy; }

    if ((tmin > tymax) || (tymin > tmax)) return vec2(-1.f);

    tmin = max(tmin, tymin);
    tmax = min(tmax, tymax);

    float tzmin = (bmin.z - o.z) / r.z;
    float tzmax = (bmax.z - o.z) / r.z;

    if (tzmin > tzmax) { float dummy = tzmin; tzmin = tzmax; tzmax = dummy; }

    if ((tmin > tzmax) || (tzmin > tmax)) return vec2(-1.f);

    return vec2(max(tmin, tzmin), min(tmax, tzmax));
}

float phase(float g, vec3 a, vec3 b)
{
    float cos_theta = dot(a, b);
    float denom = 1.f + g * g - 2.f * g * cos_theta;
    return 1.f / (4.f * 3.14f) * (1.f - g * g) / (denom * sqrt(denom));
}

float fade(float t)
{
	return t * t * t * (t * (t * 6.f - 15.f) + 10.f);
}

float eval_density(vec3 c, vec3 d, vec3 p)
{
    vec3 f = cloud.extent / d;
    p -= (c - d * .5f);
    p *= f;
    return fade(imageLoad(cloudtex, ivec3(p)).x);
}

/* reference: https://www.shadertoy.com/view/lslGzl */
vec3 linearToneMapping(vec3 color)
{
    float exposure = .6f;
    float gamma = 3.f;
    color = clamp(exposure * color, 0.f, 1.f);
    color = pow(color, vec3(1.f / gamma));
    return color;
}

void main()
{
    int x = int(8 * gl_WorkGroupID.x + gl_LocalInvocationID.x);
    int y = int(8 * gl_WorkGroupID.y + gl_LocalInvocationID.y);

    vec2 res = vec2(8 * gl_NumWorkGroups.x, 8 * gl_NumWorkGroups.y);

    vec3 o = camera.pos;
    vec3 d = camera.dir;

    vec3 left = normalize(cross(camera.up, d));
    vec3 up = normalize(cross(d, left));

    float ux = float(x) / res.x * extent.value.x;
    float uy = float(y) / res.y * extent.value.y;

    float h = tan(radians(camera.fov) / 2);
    vec3 upperleft = (o + res.y / 2 / h * d) + left * extent.value.x / 2 + up * extent.value.y / 2;
    vec3 r = normalize(upperleft - left * ux - up * uy - o);

    vec4 background = imageLoad(out_frame, ivec2(x, y));

    // intersect
    vec2 t = hit_box(cloud.centre, cloud.size, o, r);
    if ((t.x < 0.f) && (t.y >= 0.f)) { t.x = 0.f; }

    // in volume marching
    if (t.x >= 0.f)
    {
        float sigma_a = cloud.sigma_a; // absorption coefficient
        float sigma_s = cloud.sigma_s; // scattering coefficient
        float sigma_t = sigma_a + sigma_s;
        float transmittance = 1.f;
        float step = cloud.step;
        int steps = min(int((t.y - t.x) / step), cloud.max_steps);
        vec3 color = vec3(0.f);

        for (int i = 0; i < steps; ++i)
        {
            vec3 p = o + t.x * r;
            float density = eval_density(cloud.centre, cloud.size, p) * cloud.density;
            if (density < cloud.cutoff) { density = 0.f; t += step + step * rand(t.y); }
            transmittance *= exp(-step * sigma_t * density);

            // estimate in-scattering to p in volume
            vec3 ld = vec3(0.f, -1.f, 0.f);
            // vec2 lt = hit_box(box, sun_pos, ld);
            // float s = length(p - sun_pos) - lt.x;

            const float kb = 1.3806488e-23;
            float lambda = cloud.lambda * 1e-9;
            float temperature = cloud.temperature;

            vec3 li = 2.f * (1.f - exp(-step * sigma_t * i * .01f)) * vec3(1.f) * step;
            vec3 le = (1.1910429e-16 / (pow(lambda, 5.f) * (exp(1.9864457e-25 / (lambda * kb * (temperature * density))) - 1.f))) * cloud.color * step;
            color += (le * sigma_a * density + li * sigma_s * density /* phase(.3f, -ld, r)*/) * transmittance;
            // color += li * sigma_s * density /* phase(.3f, -ld, r)*/ * transmittance;

            t += step + step * rand(t.y);
            if (transmittance < (step + step * rand(t.y))) break;
        }

        color += vec3(background) * transmittance;
        imageStore(out_frame, ivec2(x, y), vec4(color, 1.f));
        // imageStore(out_frame, ivec2(x, y), vec4(linearToneMapping(color), 1.f));
    }

    // sdf marching
    // t.x = 0.f; // distance traveled
    // for (int i = 0; i < 128; ++i)
    // {
    //     float s = map(o + t.x * r);
    //     t.x += s;

    //     if (s < .01f) {
    //         vec4 color = vec4(t.x * .2f);
    //         imageStore(out_frame, ivec2(x, y), color);
    //     }

    //     if (t.x > 100.f) break;
    // }
}
/* p stands for pre */

#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16) uniform writeonly image2D out_frame;

layout (set = 0, binding = 1) uniform readonly EXTENT
{
    vec2 value;
} extent;

layout (push_constant) uniform readonly U_TIME
{
    float value;
} u_time;

float dist (vec2 a, vec2 b)
{
    return sqrt((b.y - a.y) * (b.y - a.y) + (b.x - a.x) * (b.x - a.x));
}

vec2 random2f(vec2 st)
{
    st = vec2(dot(st, vec2(127.1f, 311.7f)),
            dot(st, vec2(269.5f, 183.3f)));
    return fract(sin(st) * 43758.5453123f);
}

float noise(float x, float y)
{
    int ix = int(floor(x)) - 1;
    int iy = int(floor(y)) - 1;

    float t = 1.f;

    for (uint i = 0; i < 3; ++i)
        for (uint j = 0; j < 3; ++j) {
            vec2 r = random2f(vec2(ix + i, iy + j));
            r += vec2(i, j);
            t = min(t, dist(vec2(x - ix, y - iy), r));
        }
    
    return 1.f - t;
}

float fbm(float x, float y, uint octaves, float H)
{
    float t = 0.f;
    for (uint o = 0; o < octaves; ++o) {
        float f = pow(2.f, o);
        float a = pow(f, -H);
        t += a * noise(f * x, f * y);
    }
    return t;
}

#define octaves 16
#define infreq 3
#define h 1.f

void main()
{
    uint x = 8 * gl_WorkGroupID.x + gl_LocalInvocationID.x;
    uint y = 8 * gl_WorkGroupID.y + gl_LocalInvocationID.y;
    float ux = x / extent.value.x * infreq;
    float uy = y / extent.value.x * infreq;
    vec4 color = vec4(fbm(ux, uy, octaves, h));

    imageStore(out_frame, ivec2(x, y), color);
}
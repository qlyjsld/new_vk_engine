#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16) uniform writeonly image2D out_frame;

layout (set = 0, binding = 1) uniform readonly EXTENT
{
    vec2 value;
} extent;

// layout (set = 0, binding = 2) uniform readonly CAMERA
// {
//     vec3 pos;
//     vec3 dir;
//     vec3 up;
//     float fov;
// } camera;

float rand(float x)
{
    return fract(sin(x) * 100000.f) - .5f;
}

/* reference: https://www.shadertoy.com/view/lslGzl */
vec3 linearToneMapping(vec3 color)
{
    float exposure = .6f;
    float gamma = 3.f;
    color = clamp(exposure * color, 0.f, 1.f);
    color = pow(color, vec3(1.f / gamma));
    return color;
}

float phase(float g, vec3 a, vec3 b)
{
    float cos_theta = dot(a, b);
    float denom = 1.f + g * g - 2.f * g * cos_theta;
    return 1.f / (4.f * 3.14f) * (1.f - g * g) / (denom * sqrt(denom));
}

struct sphere {
    vec3 centre;
    float radius;
};

vec2 hit_sphere(sphere s, vec3 o, vec3 r)
{
    float a = dot(r, r);
    float b = -2 * dot(r, s.centre - o);
    float c = dot(s.centre - o, s.centre - o) - s.radius * s.radius;
    float discriminant = b * b - 4 * a * c;

    if (discriminant >= 0)
            return vec2((-b - sqrt(discriminant)) / 2 * a, (-b + sqrt(discriminant)) / 2 * a);

    return vec2(-1.f);
}

// find molecu density given height
float rho(float h, float H)
{
    return exp(-h / H);
}

#define K 2e+6

// calculate attenuate
float beta(float lambda)
{
    return 4 * 3.14 * K / (pow(lambda, 4));
}

void main()
{
    uint x = 8 * gl_WorkGroupID.x + gl_LocalInvocationID.x;
    uint y = 8 * gl_WorkGroupID.y + gl_LocalInvocationID.y;
    vec3 color = mix(vec3(.53f, .81f, .98f), vec3(1.f, 1.f, 1.f),  y / extent.value.y);
    imageStore(out_frame, ivec2(x, y), vec4(color, 1.f));

    // vec2 res = vec2(8 * gl_NumWorkGroups.x, 8 * gl_NumWorkGroups.y);

    // vec3 o = camera.pos;
    // vec3 d = camera.dir;

    // vec3 left = normalize(cross(camera.up, d));
    // vec3 up = normalize(cross(d, left));

    // float ux = float(x) / res.x * extent.value.x;
    // float uy = float(y) / res.y * extent.value.y;

    // float h = tan(radians(camera.fov) / 2.f);
    // vec3 upperleft = (o + res.y / 2.f / h * d) + left * extent.value.x / 2.f + up * extent.value.y / 2.f;
    // vec3 r = normalize(upperleft - left * ux - up * uy - o);

    // sphere earth;
    // earth.centre = vec3(0.f, -6370e3, 0.f);
    // earth.radius = 6360e3;

    // sphere atmosphere;
    // atmosphere.centre = vec3(0.f, -6370e3, 0.f);
    // atmosphere.radius = 6420e3;

    // float atmosphere_height = atmosphere.radius - earth.radius;

    //  // intersect
    // vec2 t = hit_sphere(atmosphere, o, r);
    // if ((t.x < 0.f) && (t.y >= 0.f)) { t.x = 0.f; }

    // vec2 tg = hit_sphere(earth, o, r);
    // if (tg.x > 0.f) t.y = tg.x;

    // // in volume marching
    // if (t.x >= 0.f)
    // {
    //     float step = 300.f;
    //     int steps = int((t.y - t.x) / step) - 1;
    //     float ray_optical_depth = 0.f;
    //     float mie_optical_depth = 0.f;
    //     vec3 color = vec3(0.f);

    //     float lambda[3] = float[] (680, 550, 440);
    //     vec3 colors[3] = vec3[] (vec3(1.f, 0.f, 0.f), vec3(0.f, 1.f, 0.f), vec3(0.f, 0.f, 1.f));

    //     for (int i = 0; i < 3; ++i)
    //     {
    //         for (int j = 0; j < steps; ++j)
    //         {
    //             vec3 ld = normalize(vec3(0.f, 0.f, 1.f));
    //             vec3 p = o + t.x * r;
    //             float height = length(p - earth.centre) - earth.radius;
    //             ray_optical_depth += beta(lambda[i]) * rho(height, 7994.f) * step;
    //             mie_optical_depth += beta(lambda[i]) * rho(height, 1200.f) * step;

    //             float nray_optical_depth = 0.f;
    //             float nmie_optical_depth = 0.f;

    //             int nsteps = 16;
    //             for (int k = 0; k < nsteps; ++k)
    //             {
    //                 p += (k * step) * ld;
    //                 height = length(p - earth.centre) - earth.radius;
    //                 nray_optical_depth += beta(lambda[i]) * rho(height, 7994.f) * step;
    //                 nmie_optical_depth += beta(lambda[i]) * rho(height, 1200.f) * step;
    //             }

    //             color += colors[i] * K * phase(0.f, ld, r) / pow(lambda[i], 4) * exp(-nray_optical_depth) * exp(-ray_optical_depth) * step;
    //             color += colors[i] * K * phase(.76f, ld, r) / pow(lambda[i], 4) * exp(-nmie_optical_depth) * exp(-mie_optical_depth) * step;
    //             t += step + step * rand(t.y);
    //         }

    //         if (tg.x > 0.f) color += vec3(1.f) * exp(-ray_optical_depth);
    //     }

    //     imageStore(out_frame, ivec2(x, y), vec4(color, 1.f));
    //     // imageStore(out_frame, ivec2(x, y), vec4(linearToneMapping(color), 1.f));
    // }
}

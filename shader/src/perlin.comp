/* p stands for pre */

#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16) uniform writeonly image2D out_frame;

layout (set = 0, binding = 1) uniform readonly EXTENT
{
    vec2 value;
} extent;

layout (push_constant) uniform readonly U_TIME
{
    float value;
} u_time;

uint p[] = { 151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
            140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
            247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
            57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
            74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
            60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
            65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
            200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
            52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
            207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
            119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
            129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
            218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
            81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
            184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
            222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180,
            151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
            140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
            247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
            57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
            74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
            60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
            65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
            200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
            52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
            207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
            119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
            129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
            218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
            81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
            184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
            222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180 };

float fade(float t)
{
	return t * t * t * (t * (t * 6.f - 15.f) + 10.f);
}

float lerp(float a, float b, float t)
{
	return a + t * (b - a);
}

float grad(uint h, vec2 v)
{
    switch(h & 3) {
    case 0:
        return dot(v, vec2(.707f, .707f));
    case 1:
        return dot(v, vec2(.707f, -.707f));
    case 2:
        return dot(v, vec2(-.707f, .707f));
    case 3:
        return dot(v, vec2(-.707f, -.707f));
    }
}

float noise(float x, float y)
{
    uint ix = uint(floor(x)) & 255;
    uint iy = uint(floor(y)) & 255;

    x -= floor(x);
    y -= floor(y);

    float u = fade(x);
    float v = fade(y);

    uint p_topleft = p[p[ix] + iy];
    uint p_topright = p[p[ix + 1] + iy];
    uint p_bottomleft = p[p[ix]+ iy + 1];
    uint p_bottomright = p[p[ix + 1] + iy + 1];

    vec2 dist_topleft = vec2(x, y);
    vec2 dist_topright = vec2(x - 1.f, y);
    vec2 dist_bottomleft = vec2(x, y - 1.f);
    vec2 dist_bottomright = vec2(x - 1.f, y - 1.f);

    return lerp(lerp(grad(p_topleft, dist_topleft), grad(p_topright, dist_topright), u), 
                lerp(grad(p_bottomleft, dist_bottomleft), grad(p_bottomright, dist_bottomright), u), v);
}

float fbm(float x, float y, uint octaves, float H)
{
    float t = 0.f;
    for (uint o = 0; o < octaves; ++o) {
        float f = pow(2.f, o);
        float a = pow(f, -H);
        t += a * noise(f * x, f * y);
    }
    return (t  + 1.f) / 2.f;
}

#define octaves 16
#define infreq 3
#define h 1.f

void main()
{
    uint x = 8 * gl_WorkGroupID.x + gl_LocalInvocationID.x;
    uint y = 8 * gl_WorkGroupID.y + gl_LocalInvocationID.y;
    float ux = x / extent.value.x * infreq;
    float uy = y / extent.value.x * infreq;
    // vec2 q = vec2(fbm(ux, uy, octaves, h), fbm(ux, uy, octaves, h));
    // vec2 r = vec2(fbm(ux + 3.f * q.x + -.3f * u_time.value, uy + 3.f * q.y + -.3f * u_time.value, octaves, h),
    //             fbm(ux + 3.f * q.x + .9f * u_time.value, uy + 3.f * q.y + .9f * u_time.value, octaves, h));
    // float p = fbm(ux + .3f * r.x + .3f * u_time.value, uy + .3f * r.y + .3f * u_time.value, octaves, h);
    // vec4 color = vec4(p);
    // color = mix(color, vec4(.328f, .625f, .695f, 1.f), vec4(.303f, .675f, .642f, 1.f));
    // color = mix(color, vec4(.696f, .654f, .329f, 1.f), vec4(clamp(length(q.x), 0.f, 1.f)));
    // color *= p * p * p + .6f * p * p + .5f * p;
    vec4 color = vec4(fbm(ux, uy, octaves, h));

    imageStore(out_frame, ivec2(x, y), color);
}